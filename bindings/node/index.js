/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync, copyFileSync, mkdirSync } = require('fs')
const { join, resolve } = require('path')
const version = require('./package.json').version
const envPaths = require('env-paths')

const { platform, arch } = process

let nativeBinding = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

function getNativeBinding(platform, arch) {
  switch (platform) {
    case 'android':
      switch (arch) {
        case 'arm64':
          return ['cube.android-arm64.node', '@initencounter/cube-android-arm64']
        default:
          throw new Error(`Unsupported architecture on Android ${arch}`)
      }
    case 'win32':
      switch (arch) {
        case 'x64':
          return ['cube.win32-x64-msvc.node', '@initencounter/cube-win32-x64-msvc']
        case 'arm64':
          return ['cube.win32-arm64-msvc.node', '@initencounter/cube-win32-arm64-msvc']
        default:
          throw new Error(`Unsupported architecture on Windows: ${arch}`)
      }
    case 'darwin':
      switch (arch) {
        case 'x64':
          return ['cube.darwin-x64.node', '@initencounter/cube-darwin-x64']
        case 'arm64':
          return ['cube.darwin-arm64.node', '@initencounter/cube-darwin-arm64']
        default:
          throw new Error(`Unsupported architecture on macOS: ${arch}`)
      }
    case 'linux':
      if (isMusl()) {
        switch (arch) {
          case 'x64':
            return ['cube.linux-x64-musl.node', '@initencounter/cube-linux-x64-musl']
          default:
            throw new Error(`Unsupported architecture on Linux: ${arch}`)
        }
      }else{
        switch (arch) {
          case 'x64':
            return ['cube.linux-x64-gnu.node', '@initencounter/cube-linux-x64-gnu']
          case 'arm64':
            return ['cube.linux-arm64-gnu.node', '@initencounter/cube-linux-arm64-gnu']
          default:
            throw new Error(`Unsupported architecture on Linux: ${arch}`)
        }
      }
    default:
      throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
  }
}

let [name, moduleName] = getNativeBinding(platform, arch)

if (existsSync(resolve(process.cwd(), name))) {
  console.log(`Using local native binding: ${name}`)
  nativeBinding = require(resolve(process.cwd(), name))
} else {
  let nativeBindingPath = resolve(__dirname, '../../', moduleName, name)
  let storingDir = join(envPaths('initencounter_cube').data, version)
  let storingPath = join(storingDir, name)

  if (!nativeBindingPath) {
    throw new Error(`Cannot find native binding for ${platform}-${arch}`)
  }

  if (!existsSync(storingPath)) {
    if (!existsSync(storingDir)) {
      mkdirSync(storingDir, { recursive: true })
    }
    copyFileSync(nativeBindingPath, storingPath, 0)
  }
  try {
    nativeBinding = require(storingPath)
  }
  catch (e) {
    throw new Error(`Cannot load native binding from ${storingPath}`)
  }
}

if (!nativeBinding) {
  throw new Error(`Failed to load native binding`)
}

const { CubeCore } = nativeBinding

module.exports.CubeCore = CubeCore
